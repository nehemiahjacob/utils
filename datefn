#!/usr/bin/perl -w

#=======================================================================
# datefn
# File ID: 4bec96e4-cc13-11de-a8a7-93dd800a3f5e
# Insert timestamp into file names
#
# Character set: UTF-8
# ©opyleft 2009– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 3 or later, see end of 
# file for legal stuff.
#=======================================================================

use strict;
use Getopt::Long;

$| = 1;

our $Debug = 0;

our %Opt = (

    'debug' => 0,
    'dry-run' => 0,
    'force' => 0,
    'help' => 0,
    'verbose' => 0,
    'version' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = "0.00";

Getopt::Long::Configure("bundling");
GetOptions(

    "debug" => \$Opt{'debug'},
    "dry-run|n" => \$Opt{'dry-run'},
    "force|f" => \$Opt{'force'},
    "help|h" => \$Opt{'help'},
    "verbose|v+" => \$Opt{'verbose'},
    "version" => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'debug'} && ($Debug = 1);
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

defined($ARGV[0]) || die("$progname: Missing filenames. Use -h for help.\n");

for my $Curr (@ARGV) {
    D("Curr = '$Curr'\n");
    process_file($Curr);
}

sub process_file {
    # {{{
    my $File = shift;
    unless (-f $File) {
        warn("$progname: $File: Not a regular file\n");
        return;
    }
    if ($File =~ /^\d\d\d\d\d\d\d\dT\d\d\d\d\d\dZ/) {
        warn("$progname: $File: Filename already has date\n");
        return;
    }
    D(sprintf("mod_date(%s) = '%s'\n", $File, mod_date($File)));
    my $mod_date = mod_date($File);
    my $start_date = start_date($File);
    my $dates = sprintf("%s%s%s", $start_date, length($start_date) ? "-" : "", $mod_date);
    if (length($dates)) {
        my $new_name = "$dates.$File";
        if ($Opt{'dry-run'}) {
            print("$progname: '$File' would be renamed to '$new_name'\n");
        } else {
            if (-e $new_name && !$Opt{'force'}) {
                warn("$progname: $new_name: File already exists, use --force to overwrite\n");
            } elsif (rename($File, $new_name)) {
                print("$progname: '$File' renamed to '$new_name'\n");
            } else {
                warn("$progname: $File: Cannot rename file to '$new_name': $!\n");
            }
        }
    }
    # }}}
} # process_file()

sub mod_date {
    # Return file modification timestamp {{{
    my $File = shift;
    my $Retval = "";
    my @stat_array = stat($File);
    if (scalar(@stat_array)) {
        $Retval = sec_to_string($stat_array[9]);
    } else {
        warn("$progname: $File: Cannot stat file: $!\n");
    }
    # }}}
} # mod_date()

sub start_date {
    # Find start of recording {{{
    my $File = shift;
    my $Retval = "";
    my $bwf_date = bwf_date($File);
    if (length($bwf_date)) {
        $Retval = $bwf_date;
    }
    D("start_date($File) returns '$Retval'");
    return($Retval);
    # }}}
} # start_date()

sub bwf_date {
    # Find start of recording in Broadcast Wave Format files {{{
    # This is based on examining .wav files from the Zoom H4n, and it 
    # seems to work there. The file format may vary on other devices.
    my $File = shift;
    my $Retval = "";
    unless (open(InFP, "<", $File)) {
        warn("$progname: $File: Cannot open file to look for BWF data: $!\n");
        return("");
    }
    my $buf;
    my $numread = read(InFP, $buf, 358);
    if ($numread != 358) {
        warn("$progname: $File: Could not read 358 bytes, but continuing: $!\n");
    }
    if ($buf =~ /^.*(\d\d\d\d)-(\d\d)-(\d\d)(\d\d):(\d\d):(\d\d)$/s) {
        $Retval = "$1$2${3}T$4$5${6}Z";
    }
    close(InFP);
    D("bwf_date($File) returns '$Retval'\n");
    return($Retval);
    # }}}
} # bwf_date()

sub sec_to_string {
    # Convert seconds since 1970 to "yyyymmddThhmmss[.frac]Z"
    # {{{
    my ($Seconds, $Sep) = @_;
    length($Seconds) || return(undef);
    ($Seconds =~ /^(\d*)(\.\d+)?$/) || return(undef);
    my $Secfrac = ($Seconds =~ /^([\-\d]*)(\.\d+)$/) ? 1.0*$2 : "";
    $Secfrac =~ s/^0//;

    defined($Sep) || ($Sep = " ");
    my @TA = gmtime($Seconds);
    my($DateString) = sprintf("%04u%02u%02uT%02u%02u%02u%sZ",
                              $TA[5]+1900, $TA[4]+1, $TA[3],
                              $TA[2], $TA[1], $TA[0], $Secfrac);
    return($DateString);
    # }}}
} # sec_to_string()

sub print_version {
    # Print program version {{{
    print("$progname v$VERSION\n");
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<END);

Insert filemod timestamp into filename, and start of recording if 
available. At the moment only BWF (Broadcast Wave Format, standard .wav 
with extra metadata) is supported.

Format:

  No timestamp for start of recording:
    yyyymmddThhmmssZ.OLDFILENAME
  With timestamp for start of recording:
    yyyymmddThhmmssZ-yyyymmddThhmmssZ.OLDFILENAME

Usage: $progname [options] file [files [...]]

Options:

  -f, --force
    If a file with the new name already exists, allow the program to 
    overwrite the file.
  -n, --dry-run
    Don’t rename files, but report what would happen.
  -h, --help
    Show this help.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.
  --debug
    Print debugging messages.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    # }}}
} # msg()

sub D {
    # Print a debugging message {{{
    $Debug || return;
    my @call_info = caller;
    chomp(my $Txt = shift);
    my $File = $call_info[1];
    $File =~ s#\\#/#g;
    $File =~ s#^.*/(.*?)$#$1#;
    print(STDERR "$File:$call_info[2] $$ $Txt\n");
    return("");
    # }}}
} # D()

__END__

# Plain Old Documentation (POD) {{{

=pod

=head1 NAME



=head1 SYNOPSIS

 [options] [file [files [...]]]

=head1 DESCRIPTION



=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Print a brief help summary.

=item B<-v>, B<--verbose>

Increase level of verbosity. Can be repeated.

=item B<--version>

Print version information.

=item B<--debug>

Print debugging messages.

=back

=head1 BUGS



=head1 AUTHOR

Made by Øyvind A. Holm S<E<lt>sunny@sunbase.orgE<gt>>.

=head1 COPYRIGHT

Copyleft © Øyvind A. Holm E<lt>sunny@sunbase.orgE<gt>
This is free software; see the file F<COPYING> for legalese stuff.

=head1 LICENCE

This program is free software: you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation, either version 3 of the License, or (at your 
option) any later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along 
with this program.
If not, see L<http://www.gnu.org/licenses/>.

=head1 SEE ALSO

=cut

# }}}

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
