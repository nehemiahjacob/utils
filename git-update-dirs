#!/usr/bin/perl -w

#=======================================================================
# git-update-dirs
# File ID: f1ba77e4-444e-11e0-963c-00023faf1383
# Update many git local repositories at once
#
# Character set: UTF-8
# ©opyleft 2011– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 3 or later, see end of 
# file for legal stuff.
#=======================================================================

use strict;
use Cwd;
use Getopt::Long;

$| = 1;

our $Debug = 0;

our %Opt = (

    'all-options' => 0,
    'allbr' => 0,
    'compress' => 0,
    'dangling' => 0,
    'debug' => 0,
    'dry-run' => 0,
    'exec-after' => '',
    'exec-before' => '',
    'fetch' => 0,
    'fetch-prune' => 0,
    'ga-sync' => 0,
    'help' => 0,
    'pull' => 0,
    'push' => 0,
    'quiet' => 0,
    'recursive' => 0,
    'submodule' => 0,
    'test' => 0,
    'verbose' => 0,
    'version' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = "0.00";

Getopt::Long::Configure("bundling");
GetOptions(

    "all-options|A" => \$Opt{'all-options'},
    "allbr|a" => \$Opt{'allbr'},
    "compress|c" => \$Opt{'compress'},
    "dangling|d" => \$Opt{'dangling'},
    "debug" => \$Opt{'debug'},
    "dry-run|n" => \$Opt{'dry-run'},
    "exec-after|e=s" => \$Opt{'exec-after'},
    "exec-before|E=s" => \$Opt{'exec-before'},
    "fetch-prune|F" => \$Opt{'fetch-prune'},
    "fetch|f" => \$Opt{'fetch'},
    "ga-sync|g" => \$Opt{'ga-sync'},
    "help|h" => \$Opt{'help'},
    "pull|p" => \$Opt{'pull'},
    "push|P" => \$Opt{'push'},
    "quiet|q+" => \$Opt{'quiet'},
    "recursive|r" => \$Opt{'recursive'},
    "submodule|s" => \$Opt{'submodule'},
    "test|t" => \$Opt{'test'},
    "verbose|v+" => \$Opt{'verbose'},
    "version" => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'debug'} && ($Debug = 1);
$Opt{'verbose'} -= $Opt{'quiet'};
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

if ($Opt{'all-options'}) {
    $Opt{'allbr'} = 1;
    $Opt{'dangling'} = 1;
    $Opt{'fetch-prune'} = 1;
    $Opt{'pull'} = 1;
    $Opt{'push'} = 1;
    $Opt{'submodule'} = 1;
}

my @Dirs = @ARGV;
my @err_compress = ();
my @err_dangling = ();
my @err_fetch = ();
my @err_gasync = ();
my @err_pull = ();
my @err_push = ();
my @err_test = ();
my @err_updsub = ();

if ($Opt{'recursive'}) {
    my $repos = `find -type d -name .git`;
    $repos =~ s/\/\.git\n/\n/g;
    @Dirs = sort(@Dirs, split("\n", $repos));
}

my $orig_dir = getcwd();
my ($total_before, $total_after, $total_saved) = (0, 0, 0);
LOOP: for my $f (@Dirs) {
    my $object_dir = '';
    -d "$f/.git/." && ($object_dir = ".git/objects");
    -d "$f/objects/." && ($object_dir = "objects");
    if (length($object_dir)) {
        $Opt{'verbose'} >= -1 && print("================ $f ================\n");
        if (!chdir($f)) {
            warn("$progname: $f: Cannot chdir: $!\n");
            next LOOP;
        }
        if (length($Opt{'exec-before'})) {
            mysystem($Opt{'exec-before'});
        }
        if ($Opt{'fetch-prune'}) {
            mysystem("git", "fetch", "--all", "--prune") && push(@err_fetch, $f);
        } elsif ($Opt{'fetch'}) {
            mysystem("git", "fetch", "--all") && push(@err_fetch, $f);
        }
        if ($Opt{'pull'}) {
            mysystem("git", "pull", "--ff-only") && push(@err_pull, $f);
            if (-e '.emptydirs') {
                mysystem('git', 'restore-dirs');
            }
        }
        if ($Opt{'ga-sync'}) {
            my $check_annex = `git config -l | grep annex\\.uuid`;
            if ($check_annex =~ /annex\.uuid/) {
                mysystem("ga", "sync") && push(@err_gasync, $f);
            }
        }
        if ($Opt{'dangling'}) {
            mysystem("git", "dangling") && push(@err_dangling, $f);
        }
        if ($Opt{'test'}) {
            mysystem("git", "fsck") && (
                push(@err_test, $f),
                warn("$progname: $f: ERRORS FOUND! Skipping other actions for this repo.\n"),
                next LOOP
            );
        }
        if ($Opt{'allbr'}) {
                mysystem("git", "nobr");
                mysystem("git", "allbr", "-a");
                mysystem("git", "checkout", "-");
        }
        if ($Opt{'push'}) {
            mysystem("git", "pa") && push(@err_push, $f);
        }
        if ($Opt{'submodule'} && -e ".gitmodules") {
            mysystem("git", "submodule", "init");
            mysystem("git", "submodule", "update") && push(@err_updsub, $f);
        }
        if ($Opt{'compress'}) {
            if (!-e ".no-git-gc") {
                my $dang_str = $Opt{'dangling'} ? "--prune=now" : "--no-prune";
                chomp(my $before = `(find $object_dir -type f -printf '%s+' ; echo 0) | bc`);
                $total_before += $before;
                mysystem("git", "gc", $dang_str) && push(@err_compress, $f);
                chomp(my $after = `(find $object_dir -type f -printf '%s+' ; echo 0) | bc`);
                $total_after += $after;
                my $saved = $before - $after;
                $before && printf("\nBefore: %s\nAfter : %s\nSaved : %s (%.4f%%)\n", commify($before), commify($after), commify($saved), 100.0 * $saved / $before);
            } else {
                print("$progname: .no-git-gc exists, skipping git gc\n");
            }
        }
        if (length($Opt{'exec-after'})) {
            mysystem($Opt{'exec-after'});
        }
        $Opt{'verbose'} >= -1 && print("\n");
    }
    chdir($orig_dir) || die("$progname: $orig_dir: Cannot return to original directory: $!\n");
}
scalar(@err_fetch) && print("$progname: Unable to fetch from: " . join(" ", @err_fetch) . "\n");
scalar(@err_gasync) && print("$progname: Unable to run ga sync: " . join(" ", @err_gasync) . "\n");
scalar(@err_dangling) && print("$progname: Unable to run git dangling: " . join(" ", @err_dangling) . "\n");
scalar(@err_pull) && print("$progname: Unable to pull from: " . join(" ", @err_pull) . "\n");
scalar(@err_push) && print("$progname: Unable to push from: " . join(" ", @err_push) . "\n");
scalar(@err_updsub) && print("$progname: Unable to update submodules in: " . join(" ", @err_updsub) . "\n");
scalar(@err_compress) && print("$progname: Unable to compress: " . join(" ", @err_compress) . "\n");
scalar(@err_test) && print("$progname: Error in git fsck: " . join(" ", @err_test) . "\n");

if ($Opt{'compress'}) {
    my $total_saved = $total_before - $total_after;
    printf("Before: %s\nAfter : %s\n", commify($total_before), commify($total_after));
    $total_before && printf("Total : %s (%.4f%%)\n",
        commify($total_saved), 100.0 * $total_saved / $total_before);
}

sub check_sig {
    # {{{
    my $retval = shift;
    ($retval & 127) && die("\n$progname: Child process interrupted, aborting.\n");
    return(0);
    # }}}
} # check_sig()

sub commify {
	# {{{
	my $Str = reverse $_[0];
	$Str =~ s/(\d\d\d)(?=\d)(?!\d*\,)/$1,/g;
	return scalar reverse $Str;
	# }}}
} # commify()

sub mysystem {
    # {{{
    my @cmd = @_;
    msg(0, sprintf("%s '", $Opt{'dry-run'} ? "Simulating" : "Executing") .
        join(" ", @cmd) . "'...");
    !$Opt{'dry-run'} && system(@cmd) && check_sig($?);
    return $?;
    # }}}
} # mysystem()

sub print_version {
    # Print program version {{{
    print("$progname v$VERSION\n");
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<END);

Usage: $progname [options] [directories [...]]

Options:

  -E X, --exec-before X
    Execute command X in every repo before all other commands.
  -F, --fetch-prune
    Fetch new commits from all remotes and prune deleted remote branches.
  -f, --fetch
    Fetch new commits from all remotes.
  -p, --pull
    Also execute "git pull --ff-only".
  -g, --ga-sync
    If the repo is used by git-annex, run "ga sync".
  -d, --dangling
    Execute "git dangling", i.e. turn all dangling commits into branches.
  -t, --test
    Test integrity of local repositories by running "git fsck".
  -a, --allbr
    Execute "git nobr", "git allbr -a" and "git commit -".
  -P, --push
    Also execute "git pa".
  -s, --submodule
    Update submodules if .gitmodules is found.
  -c, --compress
    Compress local repositories to save space.
  -e X, --exec-after X
    Execute command X in every repo after all other commands.

  -A, --all-options
    Run the program as if "-FpdaPs" had been specified.
  -h, --help
    Show this help.
  -n, --dry-run
    Simulate, don't actually execute any git commands.
  -q, --quiet
    Be less verbose. Can be repeated.
  -r, --recursive
    Update all repositories recursively under the current directory.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.
  --debug
    Print debugging messages.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    # }}}
} # msg()

sub D {
    # Print a debugging message {{{
    $Debug || return;
    my @call_info = caller;
    chomp(my $Txt = shift);
    my $File = $call_info[1];
    $File =~ s#\\#/#g;
    $File =~ s#^.*/(.*?)$#$1#;
    print(STDERR "$File:$call_info[2] $$ $Txt\n");
    return("");
    # }}}
} # D()

__END__

# Plain Old Documentation (POD) {{{

=pod

=head1 NAME



=head1 SYNOPSIS

 [options] [file [files [...]]]

=head1 DESCRIPTION



=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Print a brief help summary.

=item B<-v>, B<--verbose>

Increase level of verbosity. Can be repeated.

=item B<--version>

Print version information.

=item B<--debug>

Print debugging messages.

=back

=head1 BUGS



=head1 AUTHOR

Made by Øyvind A. Holm S<E<lt>sunny@sunbase.orgE<gt>>.

=head1 COPYRIGHT

Copyleft © Øyvind A. Holm E<lt>sunny@sunbase.orgE<gt>
This is free software; see the file F<COPYING> for legalese stuff.

=head1 LICENCE

This program is free software: you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation, either version 3 of the License, or (at your 
option) any later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along 
with this program.
If not, see L<http://www.gnu.org/licenses/>.

=head1 SEE ALSO

=cut

# }}}

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
