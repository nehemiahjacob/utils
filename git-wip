#!/bin/bash

#=======================================================================
# git-wip
# File ID: fe636b92-445c-11e4-940c-c80aa9e67bbd
#
# Create subbranches using '.' as level delimiter.
#
# Author: Ã˜yvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 3 or later.
#=======================================================================

progname=git-wip
curr="$(git rev-parse --abbrev-ref HEAD)"
use_new_branch=0
test "$curr" = "master" -o "$curr" = "HEAD" && use_new_branch=1

ext="wip"
test -n "$1" && { ext="$1"; shift; }

if test "$ext" = "-h" -o "$ext" = "--help"; then
    cat <<END

Usage:

  $progname -d|-h|-m|-s
  $progname BRANCHNAME

Options:

  -d
    Delete current branch after merging it to parent. Used when there's 
    no need to document the existence of the branch, and a fast-forward 
    merge will do just fine.
  -h, --help
    Show this help.
  -m
    Merge the current branch to the parent branch using --no-ff in 
    git(1). This creates a merge commit even if a fast-forward is 
    possible. Useful to group related changes together.
  -s
    Squash the branch into the parent branch, all commits will be 
    collapsed into one.

When the -d, -m or -s option is used and there are no parent branches 
(there are no full stops ('.') in the current branch name), the branch 
will be merged or squashed to 'master'.

If no options are specified, a new "subbranch" will be created from the 
current branch by postfixing it with ".BRANCHNAME" where BRANCHNAME is 
specified on the command line. An exception is made when the current 
branch is 'master', in that case the old branch name is not used as 
prefix.

END
    exit 0
fi

if test "$ext" = "-d" -o "$ext" = "-m" -o "$ext" = "-s"; then
    if test -n "$(echo "$curr" | grep '\.')"; then
        # Current branch contains a full stop, so it has a parent
        parent="$(echo "$curr" | rev | cut -d . -f 2- | rev)"
    else
        # Current branch has no parents, prepare for merge or squash to 
        # master.
        test "$ext" = "-s" && ms_str=squash || ms_str=merge
        # Loop until the user says 'y'.
        unset resp
        until test "$resp" = "y"; do
            echo -n $progname: Type \'y\' + Enter to $ms_str $curr to master...
            read resp
        done
        parent=master
    fi

    git checkout $parent &&
    if test "$ext" = "-d"; then
        # Delete current branch after merge to parent, use fast-forward 
        # if possible.
        git merge $curr
        git branch -d $curr
    elif test "$ext" = "-s"; then
        # Squash the current branch to parent, combine all commits into 
        # one.
        git merge --squash $curr
    else
        # Merge current branch into parent, always create merge commit 
        # even if a fast-forward merge is possible.
        git merge --no-ff $curr
        git branch -d $curr
    fi
    exit
fi

if test "$use_new_branch" = "1"; then
    # Create new branch without prefix
    git branch "$ext"
    git checkout "$ext"
else
    # Create new branch, use current branch name as prefix
    git branch "$curr.$ext"
    git checkout "$curr.$ext"
fi
